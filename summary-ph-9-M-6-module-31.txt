*********************************summary-ph-9-M-6-Module 31:  (Advanced) More ES6*********************************

// 31-0 Basic ES6 Concept
/*
1.parameter vs argument
2.default parameter 
3.destructuring===>akta array/object teke multiple data extract kore anake destructuring bole
4.spread operator : akta array/object k copy kore onno array/object e raka
5.highest value from array
6.array/object er definite man bad die onno mangolo destructure kore ana;
7.template literals
8.regular function vs arrow function
*/
const num = [10,20,30];
const [a,b,c] = num;
console.log(a);

const std = {
    name : 'shahid',
    age:32,
    dept :'EEE',
    isExpertWebDeveloper : true 
}
// const {name,age,dept,isExpertWebDeveloper} = std;
// console.log(dept)

const fruit = ['apple','orange','mango'];
const fol = ['banana','angor',...fruit];
console.log(fruit);
console.log(fol);

const joraFolFruit = [...fruit,...fol];
console.log('jora folfruit is -'+ joraFolFruit);

const clonedStd = {math:'expert',business:'good',...std};
console.log(std)
console.log(clonedStd);
delete clonedStd.age;
console.log(clonedStd);

const joraObj = {
    ...clonedStd,
    ...std
}
console.log(`jora object =  ${joraObj}`);
console.log(joraObj);

const number = [1,3,4,6,-7,8,99,32,54.61,23,5];
console.log(Math.max(number));
console.log(Math.max([...number]));
console.log(Math.max(...number));

console.log(std);
const {age,...rest} = std;
console.log(age);
console.log(rest);





// 31-1 Module Introduction And Basic ES6 Recap
1./*
    1.var,let,const
    2.default param
    3.template string
    4.arrow function
    5.destructuring
    6.spread operator
    7.Object.keys(),Object.values(),object.entries,freeze,seal
    8.for of--->array,string
    9.for in--->object
*/

2.
const square = (x) => x*x;
let borgo = square(5);
console.log(borgo);

const {age2,...others} = {x:2,y:5,name:'aadil',age2:2,nJoystudy:true};
console.log(age2);
console.log(others);



31-2 Access Value, Nested Object, Optional Chaining
1.
const dataAbul = [{id:1,name:'Abule',adress:'kochu khet'}];
console.log(dataAbul)
console.log(dataAbul[0].adress)

2.
const products = {
    quantity : 55,
    data:[
        {id:1,nam:'lenovo laptp',price:25000},
        {id:2,nam:'HP laptp',price:35000},
        {id:3,nam:'dell laptp',price:32000},
        {id:4,nam:'macbook',price:132000}
    ]
}
console.log(products);
console.log(products.data[1].price);

3.
const user = {
    id:69,
    name:'shahid',
    address:{
        street:{
            first:'salam mansion',
            second:'gayebi mosjid goli',
            third:'khotiber hat',
            fourth:'bahaddarhat'
        },
        city:'chattogram',
        country:'Bangladesh'
    }
}

console.log(user)
console.log(user.address.street.second)


4.
const user2 = {
    id:77,
    name : 'proi bibir majar',
    address:{
        city:'chittagong',
        country:'bangladesh'
    }
}
console.log(user2)
// console.log(user2.address.street.second)
console.log(user2.address.street?.second) //? is optional chain





31-3 Array Map To Do One Line Loop Magic

1.
const number = [2,3,4,5,6,7,8,10];
const doubleNum = [];
for(num of number){
    const double = num*2;
    doubleNum.push(double)
}
console.log(doubleNum);

// for(dbl of doubleNum){
//     console.log(dbl);
// }

2.
function doubleNumber(n){
    // console.log(n);
    return n*2;
}
const result = number.map(doubleNumber);
console.log(result)


3.
const double2 = (n)=>n*2;
const dbl2 = number.map(double2);
console.log(dbl2)

const againDbl = number.map((n)=>n*2);
console.log(againDbl);


5.
const fiveBonus = number.map((n)=>n+5);
console.log(fiveBonus);

6.
const friends = ['abul','babul','karim','sokkkoirje','abulllye'];
const frndLength = friends.map((f)=>f.length);
console.log('length of every friends ' + frndLength);

const frndFirstLetter = friends.map((f)=>f[0].toLocaleUpperCase());
console.log(frndFirstLetter)





31-4 Foreach, Filter, Find, And Differences Between Them
1.
/*map vs forEach
1.map return dibe but forEach kono return dibena
2.map er bitore & baire element goloke console kora jabe but forEach e element goloke only bitore console kora jebe
*/
const number = [2, 3, 4, 5, 6, 7, 8, 10];
const double = number.map((n) => n * 2);
console.log(double)

const double2 = number.forEach((n) => {
    console.log(n);
    return n * 2;
});
console.log(double2)

const filterNumb = number.filter((n) => n > 5);
console.log('filter number = ', filterNumb);

const filterNumb2 = number.filter((n) => n % 2 !== 0);
console.log('filter number odd number = ', filterNumb2);

const filterNumb3 = number.filter((n) => n % 2 === 0);
console.log('filter number even number = ', filterNumb3);

const friends = ['abul', 'babul', 'karim', 'sokkkoirje', 'abulllye'];
const frndFilterLength = friends.filter((f) => f.length > 5);
console.log(frndFilterLength);

const frndFilterLength2 = friends.filter((f) => f.length % 2 == 1);
console.log(typeof frndFilterLength2, frndFilterLength2);

const frndFilterLength3 = friends.find((f) => f.length > 5);
console.log(frndFilterLength3);

const frndFilterLength4 = friends.find((f) => f.length % 2 == 1);
console.log(typeof frndFilterLength4, frndFilterLength4);

/*filter vs find:
1.filter condition fulfil sob element k object like array akare debe
2.find condition fulfil 1st element k string akare debe
*/




31-5 (Recap) Map, ForEach, Filter, Find, Reduce
1.