*********************************summary-ph-9-M-6-Module 31:  (Advanced) More ES6*********************************

// 31-0 Basic ES6 Concept
/*
1.parameter vs argument
2.default parameter 
3.destructuring===>akta array/object teke multiple data extract kore anake destructuring bole
4.spread operator : akta array/object k copy kore onno array/object e raka
5.highest value from array
6.array/object er definite man bad die onno mangolo destructure kore ana;
7.template literals
8.regular function vs arrow function
*/
const num = [10,20,30];
const [a,b,c] = num;
console.log(a);

const std = {
    name : 'shahid',
    age:32,
    dept :'EEE',
    isExpertWebDeveloper : true 
}
// const {name,age,dept,isExpertWebDeveloper} = std;
// console.log(dept)

const fruit = ['apple','orange','mango'];
const fol = ['banana','angor',...fruit];
console.log(fruit);
console.log(fol);

const joraFolFruit = [...fruit,...fol];
console.log('jora folfruit is -'+ joraFolFruit);

const clonedStd = {math:'expert',business:'good',...std};
console.log(std)
console.log(clonedStd);
delete clonedStd.age;
console.log(clonedStd);

const joraObj = {
    ...clonedStd,
    ...std
}
console.log(`jora object =  ${joraObj}`);
console.log(joraObj);

const number = [1,3,4,6,-7,8,99,32,54.61,23,5];
console.log(Math.max(number));
console.log(Math.max([...number]));
console.log(Math.max(...number));

console.log(std);
const {age,...rest} = std;
console.log(age);
console.log(rest);





// 31-1 Module Introduction And Basic ES6 Recap
1./*
    1.var,let,const
    2.default param
    3.template string
    4.arrow function
    5.destructuring
    6.spread operator
    7.Object.keys(),Object.values(),object.entries,freeze,seal
    8.for of--->array,string
    9.for in--->object
*/

2.
const square = (x) => x*x;
let borgo = square(5);
console.log(borgo);

const {age2,...others} = {x:2,y:5,name:'aadil',age2:2,nJoystudy:true};
console.log(age2);
console.log(others);



31-2 Access Value, Nested Object, Optional Chaining
1.
const dataAbul = [{id:1,name:'Abule',adress:'kochu khet'}];
console.log(dataAbul)
console.log(dataAbul[0].adress)

2.
const products = {
    quantity : 55,
    data:[
        {id:1,nam:'lenovo laptp',price:25000},
        {id:2,nam:'HP laptp',price:35000},
        {id:3,nam:'dell laptp',price:32000},
        {id:4,nam:'macbook',price:132000}
    ]
}
console.log(products);
console.log(products.data[1].price);

3.
const user = {
    id:69,
    name:'shahid',
    address:{
        street:{
            first:'salam mansion',
            second:'gayebi mosjid goli',
            third:'khotiber hat',
            fourth:'bahaddarhat'
        },
        city:'chattogram',
        country:'Bangladesh'
    }
}

console.log(user)
console.log(user.address.street.second)


4.
const user2 = {
    id:77,
    name : 'proi bibir majar',
    address:{
        city:'chittagong',
        country:'bangladesh'
    }
}
console.log(user2)
// console.log(user2.address.street.second)
console.log(user2.address.street?.second) //? is optional chain





31-3 Array Map To Do One Line Loop Magic

1.
const number = [2,3,4,5,6,7,8,10];
const doubleNum = [];
for(num of number){
    const double = num*2;
    doubleNum.push(double)
}
console.log(doubleNum);

// for(dbl of doubleNum){
//     console.log(dbl);
// }

2.
function doubleNumber(n){
    // console.log(n);
    return n*2;
}
const result = number.map(doubleNumber);
console.log(result)


3.
const double2 = (n)=>n*2;
const dbl2 = number.map(double2);
console.log(dbl2)

const againDbl = number.map((n)=>n*2);
console.log(againDbl);


5.
const fiveBonus = number.map((n)=>n+5);
console.log(fiveBonus);

6.
const friends = ['abul','babul','karim','sokkkoirje','abulllye'];
const frndLength = friends.map((f)=>f.length);
console.log('length of every friends ' + frndLength);

const frndFirstLetter = friends.map((f)=>f[0].toLocaleUpperCase());
console.log(frndFirstLetter)





31-4 Foreach, Filter, Find, And Differences Between Them
1.
/*map vs forEach
1.map return dibe but forEach kono return dibena
2.map er bitore & baire element goloke console kora jabe but forEach e element goloke only bitore console kora jebe
*/
const number = [2, 3, 4, 5, 6, 7, 8, 10];
const double = number.map((n) => n * 2);
console.log(double)

const double2 = number.forEach((n) => {
    console.log(n);
    return n * 2;
});
console.log(double2)

const filterNumb = number.filter((n) => n > 5);
console.log('filter number = ', filterNumb);

const filterNumb2 = number.filter((n) => n % 2 !== 0);
console.log('filter number odd number = ', filterNumb2);

const filterNumb3 = number.filter((n) => n % 2 === 0);
console.log('filter number even number = ', filterNumb3);

const friends = ['abul', 'babul', 'karim', 'sokkkoirje', 'abulllye'];
const frndFilterLength = friends.filter((f) => f.length > 5);
console.log(frndFilterLength);

const frndFilterLength2 = friends.filter((f) => f.length % 2 == 1);
console.log(typeof frndFilterLength2, frndFilterLength2);

const frndFilterLength3 = friends.find((f) => f.length > 5);
console.log(frndFilterLength3);

const frndFilterLength4 = friends.find((f) => f.length % 2 == 1);
console.log(typeof frndFilterLength4, frndFilterLength4);

/*filter vs find:
1.filter condition fulfil sob element k object like array akare debe
2.find condition fulfil 1st element k string akare debe
*/




31-5 (Recap) Map, ForEach, Filter, Find, Reduce
1.
const number = [2, 3, 4, 5, 6, 7, 8, 10];
const numberReduce = number.reduce((a, b) => a + b, 0);
console.log('reduce is summm of array element', numberReduce);
console.log(`-------------------------------`)

2.
const friends = ['abul', 'babul', 'karim', 'sokkkoirje', 'abulllye'];
const frndReduce = friends.reduce((a, b) => a + b, ' ');
console.log(frndReduce);

console.log(`------------------------`)

const frndReduce2 = friends.reduce((x, y) => x + y, 'maha');
console.log(frndReduce2)

console.log(`-------------------------------`)


3.
const array1 = [1, 2, 3, 4];
// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
    ((updateInitialValue, currentValue) => updateInitialValue + currentValue),
    initialValue,
);

console.log(sumWithInitial);
// Expected output: 10

console.log(`------------------`)

5.
const total = [15, 16, 17, 18, 19].reduce(
    (accumulator, currentValue) => accumulator + currentValue,
    0,
);
//accumulator is initialValue/equivalent uspdateInitialValue
console.log(total)

console.log(`------------------`)

6.
const objects = [{ x: 1 }, { x: 2 }, { x: 3 }];
const sum = objects.reduce(
    (accumulator, currentValue) => accumulator + currentValue.x,
    0,
);

console.log(sum); // 6

7.
const products = [
    { id: 1, nam: 'lenovo laptp', price: 25000 },
    { id: 2, nam: 'HP laptp', price: 35000 },
    { id: 3, nam: 'dell laptp', price: 32000 },
    { id: 4, nam: 'macbook', price: 132000 }
]

const damOrMollo = products.map((p) => p.price);
console.log(damOrMollo);

const reduceDamOrMolloTotal = products.reduce((p1, p2) => p1 + p2.price, 0);
console.log(reduceDamOrMolloTotal);

8.
const damForEach = products.forEach((p) => {
    p.nam
    console.log(p.nam)
})
console.log(damForEach)

9.
const filterProduct = products.filter((p) => p.price);
console.log(filterProduct)

const filterProductPrice = products.filter((p) => p.price > 30000);
console.log(filterProductPrice)

10.
const findProduct = products.find((p) => p.price);
console.log(findProduct)

/*array te j koivabe loop chalano jai:
1.for loop
2.while loop
3.for of loop
4.for in loop(ghorie-pechie)
5.forEach
6.map
7.filter
8.find
9.reduce
*/





31-6 (Optional) Introduction To Class And Objects
1.
// 31-6 (Optional) Introduction To Class And Objects
const products = [
    { id: 1, nam: 'lenovo laptp', price: 25000 },
    { id: 2, nam: 'HP laptp', price: 35000 },
    { id: 3, nam: 'dell laptp', price: 32000 },
    { id: 4, nam: 'macbook', price: 132000 }
]

2.
class Product {
    country = 'BD';
    constructor(namDao) {
        this.name = namDao;
    }
    speak(talk) {
        console.log(`sohel u r talking logically ${talk}`)
    }
}

// const lenovo = Product();
// const lenovo = new Product();
console.log(`----------------------`)
const lenovo = new Product('apple');
console.log(lenovo);
lenovo.speak(`and this is good practic`);

3.
class Teacher {
    constructor(name, subject) {
        this.nam = `Sirer nam holo ${name}`
        this.bisoi = `Sir ${subject} kob valobabe porai`
    }
    lecture() {
        console.log(`sir is teaching Math`)
    }
}

const master = new Teacher('ABUL', 'BANGLA');
console.log(master);
master.lecture()

console.log(`----------------------`);
const eunusSir = new Teacher('Eunus Sir', 'Math');
console.log(eunusSir)



31-7 (Optional) Inheritance Prototypical Inheritance
1.
class Vehicle {
    constructor(name, price) {
        this.nam = name;
        this.dam = price
    }
    move() {
        console.log('gari cholena cholena cholena re,')
    }
}
let gari = new Vehicle;
console.log(gari);
gari.move()

2.
class Bus extends Vehicle {
    constructor(name, price, seat, ticketPrice) {
        // this.buserNam = name,
        //     this.buserDam = price,
        //     this.ason = seat,
        //     this.seaterDam = ticketPrice
        super(name, price);
        this.ason = seat,
            this.seaterDam = ticketPrice
    }
}

const localBus = new Bus;
console.log(localBus)

class Truck extends Vehicle {
    constructor(name, price, load) {
        super(name, price);
        this.loadKotoNitePare = load;
    }
}
const truckkkk = new Truck;
console.log(truckkkk)

3.
/*
what is an Object--->
class--->is a template for making object
object--->e 2t jinis take:1.property(attribute/state) 2.method(do something,function & procedure)
*/

// super class vs sub class

//object inherits from objects

/*
https://youtu.be/B6vSq4KiZeM?si=2Hbyoc5XaI93rIhq

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain

https://www.freecodecamp.org/news/object-oriented-programming-javascript/
*/



31-8 (Advanced) This Keyword, Dot Notation Vs Bracket Notation
1.